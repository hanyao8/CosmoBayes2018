library(rstan)
lin_reg_code = "
functions {
real DL_star(real a, real b);
real lin_func(real arg_x, real par_a, real par_b, real par_c){
real ans;
ans = par_a*arg_x + par_b + par_c;
return ans;
}
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real mu[n];
for (i in 1:n) {
mu[i] = lin_func(x[i], a, b, DL_star(1.0,0.3));
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {
real result;
result=1.5;
}
"
#mu[i] = lin_func(x[i], a, b, DL_star(1.0,0.3));
#mu[i] = lin_func(x[i], a, b, DL_star(1.0,0.3));
zmu_data = read.table(file.path(getwd(),'data/jla_mub_0.txt'))
Cov_inv = read.table(file.path(getwd(),'data/jla_mub_covinvmatrix.txt'))
z=zmu_data[[1]]
mu=zmu_data[[2]]
n = 11
a = 6.0
b = 0.0
c=4.0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=c)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'DL_star.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat,chains=1,iter=500)
print(fit)
library(rstan)
cpp_code = "
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
ext_func1(T0__& x, T1__& a, T2__& b, std::ostream* pstream__) {
T1__ ans;
ans = a*x + b;
return ans;
}
"
write(cpp_code, "ext_func.hpp")
lin_reg_code = "
functions {
real ext_func1(real x, real a, real b);
}
data {
int<lower=0> n;
real x[n];
real y[n];
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real mu[n];
for (i in 1:n) {
mu[i] = ext_func1(x[i], a, b);
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {}
"
n = 11
a = 6
b = 2
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'ext_func1.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat)
print(fit)
setwd("~/GitHub/CosmoBayes2018/tests")
library(rstan)
cpp_code = "
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
ext_func1(T0__& x, T1__& a, T2__& b, std::ostream* pstream__) {
T1__ ans;
ans = a*x + b;
return ans;
}
"
write(cpp_code, "ext_func.hpp")
lin_reg_code = "
functions {
real ext_func1(real x, real a, real b);
}
data {
int<lower=0> n;
real x[n];
real y[n];
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real mu[n];
for (i in 1:n) {
mu[i] = ext_func1(x[i], a, b);
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {}
"
n = 11
a = 6
b = 2
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'ext_func1.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat)
print(fit)
setwd("C:/Users/Choon/Desktop/alglib_trial")
library(rstan)
lin_reg_code = "
functions {
real DL_star(real a, real b);
real lin_func(real arg_x, real par_a, real par_b, real par_c){
real ans;
ans = par_a*arg_x + par_b + par_c;
return ans;
}
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real mu[n];
for (i in 1:n) {
mu[i] = lin_func(x[i], a, b, DL_star(1.0,9.3));
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {
real result;
result=1.5;
}
"
#mu[i] = lin_func(x[i], a, b, DL_star(1.0,0.3));
#mu[i] = lin_func(x[i], a, b, DL_star(1.0,0.3));
zmu_data = read.table(file.path(getwd(),'data/jla_mub_0.txt'))
Cov_inv = read.table(file.path(getwd(),'data/jla_mub_covinvmatrix.txt'))
z=zmu_data[[1]]
mu=zmu_data[[2]]
n = 11
a = 6.0
b = 0.0
c=4.0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=c)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'DL_star.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat,chains=1,iter=500)
print(fit)
setwd("C:/Users/Choon/Desktop/alglib_trial")
library(rstan)
lin_reg_code = "
functions {
real DL_star(real a, real b);
real lin_func(real arg_x, real par_a, real par_b, real par_c){
real ans;
ans = par_a*arg_x + par_b + par_c;
return ans;
}
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real mu[n];
for (i in 1:n) {
mu[i] = lin_func(x[i], a, b, DL_star(1.0,9.3));
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {
real result;
result=1.5;
}
"
#mu[i] = lin_func(x[i], a, b, DL_star(1.0,0.3));
#mu[i] = lin_func(x[i], a, b, DL_star(1.0,0.3));
zmu_data = read.table(file.path(getwd(),'data/jla_mub_0.txt'))
Cov_inv = read.table(file.path(getwd(),'data/jla_mub_covinvmatrix.txt'))
z=zmu_data[[1]]
mu=zmu_data[[2]]
n = 11
a = 6.0
b = 0.0
c=4.0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=c)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'DL_star.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat,chains=1,iter=500)
print(fit)
setwd("~/GitHub/CosmoBayes2018/tests")
library(rstan)
lin_reg_code = "
functions {
real ext_func2(real x, real a, real b, real c);
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real mu[n];
for (i in 1:n) {
mu[i] = ext_func2(x[i], a, b, c);
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {}
"
n = 11
a = 6
b = 0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=3.0)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'ext_func2.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat)
print(fit)
library(rstan)
lin_reg_code = "
functions {
real ext_func2(real x, real a, real b, real c);
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real mu[n];
for (i in 1:n) {
mu[i] = ext_func2(x[i], a, b, c);
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {}
"
n = 11
a = 6
b = 0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=3.0)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'ext_func2.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat,chains=1,iter=500)
print(fit)
setwd("~/GitHub/CosmoBayes2018/tests")
library(rstan)
lin_reg_code = "
functions {
real ext_func2(real x, real a, real b, real c);
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real mu[n];
for (i in 1:n) {
mu[i] = ext_func2(x[i], a, b, c);
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {}
"
n = 11
a = 6
b = 0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=3.0)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'ext_func2.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat,chains=1,iter=500)
print(fit)
library(rstan)
lin_reg_code = "
functions {
real ext_func2(real x, real a, real b, real c);
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real c_tf;
c_tf = c;
real mu[n];
for (i in 1:n) {
mu[i] = ext_func2(x[i], a, b, c_tf);
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {}
"
n = 11
a = 6
b = 0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=3.0)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'ext_func2.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat,chains=1,iter=500)
print(fit)
library(rstan)
lin_reg_code = "
functions {
real ext_func2(real x, real a, real b, real c);
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real c_tf = c;
real mu[n];
for (i in 1:n) {
mu[i] = ext_func2(x[i], a, b, c_tf);
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {}
"
n = 11
a = 6
b = 0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=3.0)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'ext_func2.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat,chains=1,iter=500)
print(fit)
library(rstan)
lin_reg_code = "
functions {
real ext_func2(real x, real a, real b, real c);
}
data {
int<lower=0> n;
real x[n];
real y[n];
real c;
}
transformed data {}
parameters {
real a;
real b;
real sigma;
}
transformed parameters {
real c_tf = c;
real mu[n];
for (i in 1:n) {
mu[i] = ext_func2(x[i], a, b, c);
}
}
model {
sigma ~ uniform(0, 10);
y ~ normal(mu, sigma);
}
generated quantities {}
"
n = 11
a = 6
b = 0
sigma = 0.1
x = array(seq(0, 1, 0.1))
bs = array(c(b), dim = 11)
y = a*x + bs + rnorm(11, sd = 0.1)
lin_reg_dat = list(n = n, x = x, y = y, c=3.0)
model1 = stan_model(model_code = lin_reg_code, allow_undefined = TRUE, includes = paste0('\n#include "', file.path(getwd(), 'ext_func2.hpp'), '"\n'))
fit = sampling(model1, data = lin_reg_dat,chains=1,iter=500)
print(fit)
